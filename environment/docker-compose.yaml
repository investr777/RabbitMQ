version: "3.9"

services:
  rabbitmq:
    container_name: rabbitmq
    restart: always
    build: rabbitmq/
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q check_running" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 15672:15672
    networks:
      - border_network

  border_validator:
    depends_on:
      rabbitmq:
        condition: service_healthy
    container_name: border_validator
    restart: always
    build: ../sources/rmq/app-border-validator/
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbit
      RABBITMQ_PASSWORD: mq_password
      INCOMING_QUEUE_NAME: incoming
      BORDER_CORRIDOR_EXCHANGE: border_corridor
      PERSON_ROUTING_KEY: person.cmn
      CAR_ROUTING_KEY: car.cmn
      BLOCKED_PERSON_ROUTING_KEY: person.blocked
      BLOCKED_CAR_ROUTING_KEY: car.blocked
    networks:
      - border_network

  messages-handler:
    depends_on:
      rabbitmq:
        condition: service_healthy
    container_name: messages_handler
    restart: always
    build: ../sources/rmq/app-messages-handler/
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbit
      RABBITMQ_PASSWORD: mq_password
      CAR_QUEUE_NAME: car
      PERSON_QUEUE_NAME: person
    networks:
      - border_network

  postgres:
    container_name: postgres
    restart: always
    image: postgres:14.2
    environment:
      POSTGRES_USER: management
      POSTGRES_PASSWORD: postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U management" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    networks:
      - border_network

  management_api:
    depends_on:
      postgres:
        condition: service_healthy
    container_name: management_api
    restart: always
    build: ../sources/rmq/app-management-api/
    environment:
      MANAGEMENT_DB_URL: jdbc:postgresql://postgres:5432/postgres
      MANAGEMENT_DB_USERNAME: management
      MANAGEMENT_DB_PASSWORD: postgresql
    ports:
      - 8081:8080
    networks:
      - border_network

  incoming:
    depends_on:
      - rabbitmq
    container_name: incoming
    restart: always
    build: ../sources/rmq/app-incoming-handler/
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbit
      RABBITMQ_PASSWORD: mq_password
      INCOMING_EXCHANGE: incoming_handler
    networks:
      - border_network

networks:
  border_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.1.0/24
